#include <Arduino.h>
//#include <ESP8266WiFi.h>
//#include <ESP8266HTTPClient.h>
//#include <WiFiClientSecureBearSSL.h>
#include <MFRC522.h>

//HTTPClient https;
const uint8_t fingerprint[20] = {0x1b, 0x91, 0x76, 0xfa, 0x59, 0xd1, 0xc6, 0x08, 0xcc, 0x14, 0x8b, 0xcd, 0x82, 0x5e, 0x88, 0xff, 0x07, 0x25, 0x77, 0x0e};

#define SS_PIN D2
#define RST_PIN D1
MFRC522 mfrc522(SS_PIN, RST_PIN);	// Create MFRC522 instance.

MFRC522::MIFARE_Key key;

int writeBlock(int blockNumber, byte arrayAddress[]) 
{
    //this makes sure that we only write into data blocks. Every 4th block is a trailer block for the access/security info.
    int largestModulo4Number=blockNumber/4*4;
    int trailerBlock=largestModulo4Number+3;//determine trailer block for the sector
    if (blockNumber > 2 && (blockNumber+1)%4 == 0){Serial.print(blockNumber);Serial.println(" is a trailer block:");return 2;}//block number is a trailer block (modulo 4); quit and send error code 2
    Serial.print(blockNumber);
    Serial.println(" is a data block:");

    /*****************************************authentication of the desired block for access***********************************************************/
    byte status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
    //byte PCD_Authenticate(byte command, byte blockAddr, MIFARE_Key *key, Uid *uid);
    //this method is used to authenticate a certain block for writing or reading
    //command: See enumerations above -> PICC_CMD_MF_AUTH_KEY_A	= 0x60 (=1100000),		// this command performs authentication with Key A
    //blockAddr is the number of the block from 0 to 15.
    //MIFARE_Key *key is a pointer to the MIFARE_Key struct defined above, this struct needs to be defined for each block. New cards have all A/B= FF FF FF FF FF FF
    //Uid *uid is a pointer to the UID struct that contains the user ID of the card.
    if (status != MFRC522::STATUS_OK) {
        Serial.print("PCD_Authenticate() failed: ");
        return 3;//return "3" as error message
    }
    //it appears the authentication needs to be made before every block read/write within a specific sector.
    //If a different sector is being authenticated access to the previous one is lost.


    /*****************************************writing the block***********************************************************/

    status = mfrc522.MIFARE_Write(blockNumber, arrayAddress, 16);//valueBlockA is the block number, MIFARE_Write(block number (0-15), byte array containing 16 values, number of bytes in block (=16))
    //status = mfrc522.MIFARE_Write(9, value1Block, 16);
    if (status != MFRC522::STATUS_OK) {
        Serial.print("MIFARE_Write() failed: ");
        return 4;//return "4" as error message
    }
    Serial.println("block was written");
}


int readBlock(int blockNumber, byte arrayAddress[]) 
{
    int largestModulo4Number=blockNumber/4*4;
    int trailerBlock=largestModulo4Number+3;//determine trailer block for the sector

    /*****************************************authentication of the desired block for access***********************************************************/
    byte status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
    //byte PCD_Authenticate(byte command, byte blockAddr, MIFARE_Key *key, Uid *uid);
    //this method is used to authenticate a certain block for writing or reading
    //command: See enumerations above -> PICC_CMD_MF_AUTH_KEY_A	= 0x60 (=1100000),		// this command performs authentication with Key A
    //blockAddr is the number of the block from 0 to 15.
    //MIFARE_Key *key is a pointer to the MIFARE_Key struct defined above, this struct needs to be defined for each block. New cards have all A/B= FF FF FF FF FF FF
    //Uid *uid is a pointer to the UID struct that contains the user ID of the card.
    if (status != MFRC522::STATUS_OK) {
        Serial.print("PCD_Authenticate() failed (read): ");
        return 3;//return "3" as error message
    }
    //it appears the authentication needs to be made before every block read/write within a specific sector.
    //If a different sector is being authenticated access to the previous one is lost.


    /*****************************************reading a block***********************************************************/

    byte buffersize = 18;//we need to define a variable with the read buffer size, since the MIFARE_Read method below needs a pointer to the variable that contains the size... 
    status = mfrc522.MIFARE_Read(blockNumber, arrayAddress, &buffersize);//&buffersize is a pointer to the buffersize variable; MIFARE_Read requires a pointer instead of just a number
    if (status != MFRC522::STATUS_OK) {
        Serial.print("MIFARE_read() failed: ");
        return 4;//return "4" as error message
    }
    Serial.println("block was read");
}
void dump_byte_array (byte *buffer, byte bufferSize) {
    for (byte i = 0; i < bufferSize; i++) {
        Serial.print(buffer[i] < 0x10 ? " 0" : " ");
        Serial.print(buffer[i], HEX);
    }
}
void setup() {
    Serial.begin(9600);
    SPI.begin();			// Init SPI bus
    mfrc522.PCD_Init();	// Init MFRC522 card
    for (byte i = 0; i < 6; i++) {
        key.keyByte[i] = 0xFF;
    }
    dump_byte_array(key.keyByte, MFRC522::MF_KEY_SIZE);
    Serial.println();

    /*WiFi.begin("MMA", "megamega");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
    }
    Serial.println(WiFi.localIP());*/
}

int block=2;//this is the block number we will write into and then read. Do not write into 'sector trailer' block, since this can make the block unusable.

byte blockcontent[16] = {"abcdefghijklm___"};//an array with 16 bytes to be written into one of the 64 card blocks is defined
//byte blockcontent[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};//all zeros. This can be used to delete a block.
byte readbackblock[18];//This array is used for reading out a block. The MIFARE_Read method requires a buffer that is at least 18 bytes to hold the 16 bytes of a block.
void loop() {
    // Look for new cards
    if ( ! mfrc522.PICC_IsNewCardPresent()) {
        return;
    }

    // Select one of the cards
    if ( ! mfrc522.PICC_ReadCardSerial()) {
        return;
    }

    writeBlock(block, blockcontent);//the blockcontent array is written into the card block

    //The 'PICC_DumpToSerial' method 'dumps' the entire MIFARE data block into the serial monitor. Very useful while programming a sketch with the RFID reader...
    //Notes:
    //(1) MIFARE cards conceal key A in all trailer blocks, and shows 0x00 instead of 0xFF. This is a secutiry feature. Key B appears to be public by default.
    //(2) The card needs to be on the reader for the entire duration of the dump. If it is removed prematurely, the dump interrupts and an error message will appear.
    //(3) The dump takes longer than the time alloted for interaction per pairing between reader and card, i.e. the readBlock function below will produce a timeout if
    //    the dump is used.

    //mfrc522.PICC_DumpToSerial(&(mfrc522.uid));//uncomment this if you want to see the entire 1k memory with the block written into it.

    readBlock(block, readbackblock);//read the block back
    Serial.print("read block: ");
    for (int j=0 ; j<16 ; j++)//print the block contents
    {
        Serial.write(readbackblock[j]);//Serial.write() transmits the ASCII numbers as human readable characters to serial monitor
    }
    Serial.println("");

    /*String baseUrl = "https://scapi.now.sh/api/create?";
      String name = "name=NODEMCU&";
      String fatherName = "fatherName=NODEMCU_APHAY&";
      String uitID = "uitID=1001&";
      String createdDate = "createdDate=2002-02-02&";
      String expireDate = "expireDate=2003-02-02";
      if (WiFi.status() == WL_CONNECTED) {

      std::unique_ptr<BearSSL::WiFiClientSecure>client(new BearSSL::WiFiClientSecure);
      client->setFingerprint(fingerprint);

      String createUrl = baseUrl + name + fatherName + uitID + createdDate + expireDate;

      if (https.begin(*client, createUrl)) {
      int httpCode = https.GET();
      if (httpCode > 0) {
      Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
      if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
      String payload = https.getString();
      Serial.println(payload);
      }
      } else {
      Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());
      }
      https.end();
      } else {
      Serial.printf("[HTTPS] Unable to connect\n");
      }
      }*/
}

